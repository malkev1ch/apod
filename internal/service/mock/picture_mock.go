// Code generated by MockGen. DO NOT EDIT.
// Source: picture.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/malkev1ch/apod/internal/model"
)

// MockPictureRepository is a mock of PictureRepository interface.
type MockPictureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPictureRepositoryMockRecorder
}

// MockPictureRepositoryMockRecorder is the mock recorder for MockPictureRepository.
type MockPictureRepositoryMockRecorder struct {
	mock *MockPictureRepository
}

// NewMockPictureRepository creates a new mock instance.
func NewMockPictureRepository(ctrl *gomock.Controller) *MockPictureRepository {
	mock := &MockPictureRepository{ctrl: ctrl}
	mock.recorder = &MockPictureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPictureRepository) EXPECT() *MockPictureRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPictureRepository) Create(arg0 context.Context, arg1 *model.Picture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPictureRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPictureRepository)(nil).Create), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockPictureRepository) GetAll(arg0 context.Context) ([]model.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]model.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPictureRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPictureRepository)(nil).GetAll), arg0)
}

// GetByDate mocks base method.
func (m *MockPictureRepository) GetByDate(arg0 context.Context, arg1 time.Time) (model.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDate", arg0, arg1)
	ret0, _ := ret[0].(model.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDate indicates an expected call of GetByDate.
func (mr *MockPictureRepositoryMockRecorder) GetByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDate", reflect.TypeOf((*MockPictureRepository)(nil).GetByDate), arg0, arg1)
}

// MockNasaAPIRepository is a mock of NasaAPIRepository interface.
type MockNasaAPIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNasaAPIRepositoryMockRecorder
}

// MockNasaAPIRepositoryMockRecorder is the mock recorder for MockNasaAPIRepository.
type MockNasaAPIRepositoryMockRecorder struct {
	mock *MockNasaAPIRepository
}

// NewMockNasaAPIRepository creates a new mock instance.
func NewMockNasaAPIRepository(ctrl *gomock.Controller) *MockNasaAPIRepository {
	mock := &MockNasaAPIRepository{ctrl: ctrl}
	mock.recorder = &MockNasaAPIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNasaAPIRepository) EXPECT() *MockNasaAPIRepositoryMockRecorder {
	return m.recorder
}

// GetAPODByDate mocks base method.
func (m *MockNasaAPIRepository) GetAPODByDate(ctx context.Context, date time.Time) (model.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPODByDate", ctx, date)
	ret0, _ := ret[0].(model.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPODByDate indicates an expected call of GetAPODByDate.
func (mr *MockNasaAPIRepositoryMockRecorder) GetAPODByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPODByDate", reflect.TypeOf((*MockNasaAPIRepository)(nil).GetAPODByDate), ctx, date)
}

// LoadFile mocks base method.
func (m *MockNasaAPIRepository) LoadFile(ctx context.Context, rawURL string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFile", ctx, rawURL)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFile indicates an expected call of LoadFile.
func (mr *MockNasaAPIRepositoryMockRecorder) LoadFile(ctx, rawURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFile", reflect.TypeOf((*MockNasaAPIRepository)(nil).LoadFile), ctx, rawURL)
}

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// PutObject mocks base method.
func (m *MockFileRepository) PutObject(ctx context.Context, bucket string, input *model.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucket, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockFileRepositoryMockRecorder) PutObject(ctx, bucket, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockFileRepository)(nil).PutObject), ctx, bucket, input)
}
